<p><canvas id="analytics-chart"></canvas>

<script>
	import Chart from "chart.js/auto"
	import { data } from "./data.js"
	import prettyBytes from "pretty-bytes"

	import { _adapters } from "chart.js"
	import dayjs, { QUnitType } from "dayjs"
	import type { TimeUnit } from "chart.js"

	import CustomParseFormat from "dayjs/plugin/customParseFormat.js"
	import AdvancedFormat from "dayjs/plugin/advancedFormat.js"
	import QuarterOfYear from "dayjs/plugin/quarterOfYear.js"
	import LocalizedFormat from "dayjs/plugin/localizedFormat.js"
	import isoWeek from "dayjs/plugin/isoWeek.js"

	dayjs.extend(AdvancedFormat)
	dayjs.extend(QuarterOfYear)
	dayjs.extend(LocalizedFormat)
	dayjs.extend(CustomParseFormat)
	dayjs.extend(isoWeek)

	const FORMATS = {
		datetime: "MMM D, YYYY, h:mm:ss a",
		millisecond: "h:mm:ss.SSS a",
		second: "h:mm:ss a",
		minute: "h:mm a",
		hour: "hA",
		day: "MMM D",
		week: "ll",
		month: "MMM YYYY",
		quarter: "[Q]Q - YYYY",
		year: "YYYY",
	}

	_adapters._date.override({
		//_id: 'dayjs', //DEBUG,
		formats: () => FORMATS,
		parse: function (value: any, format?: TimeUnit) {
			const valueType = typeof value

			if (value === null || valueType === "undefined") {
				return null
			}

			if (valueType === "string" && typeof format === "string") {
				return dayjs(value, format).isValid()
					? dayjs(value, format).valueOf()
					: null
			} else if (!(value instanceof dayjs)) {
				return dayjs(value).isValid() ? dayjs(value).valueOf() : null
			}
			return null
		},
		format: function (time: any, format: TimeUnit): string {
			return dayjs(time).format(format)
		},
		add: function (time: any, amount: number, unit: QUnitType & TimeUnit) {
			return dayjs(time).add(amount, unit).valueOf()
		},
		diff: function (max: any, min: any, unit: TimeUnit) {
			return dayjs(max).diff(dayjs(min), unit)
		},
		startOf: function (
			time: any,
			unit: (TimeUnit & QUnitType) | "isoWeek",
			weekday?: number
		) {
			if (unit === "isoWeek") {
				// Ensure that weekday has a valid format
				//const formattedWeekday

				const validatedWeekday: number =
					typeof weekday === "number" && weekday > 0 && weekday < 7
						? weekday
						: 1

				return dayjs(time)
					.isoWeekday(validatedWeekday)
					.startOf("day")
					.valueOf()
			}

			return dayjs(time).startOf(unit).valueOf()
		},
		endOf: function (time: any, unit: TimeUnit & QUnitType) {
			return dayjs(time).endOf(unit).valueOf()
		},
	})

	const ctx: HTMLCanvasElement = document.getElementById("analytics-chart")!

	const groupingDataCallback = (acc, val, index) => {
		index = Math.floor(index / 3)
		acc[index] ??= 0
		acc[index] += val
		return acc
	}

	const groupingTimeCallback = (acc, val, index) => {
		index = Math.floor(index / 3)
		acc[index] ??= val
		return acc
	}

	let yMax: number = data.pageviews
		.slice(0, 337)
		.reduce(groupingDataCallback, [])
		.sort((a, b) => a < b)[1]
	console.log(yMax)
	const yMaxBase = yMax.toString().length - 1
	yMax = Math.ceil(yMax / 10 ** yMaxBase) * 10 ** yMaxBase
	console.log(yMaxBase)

	new Chart(ctx, {
		type: "line",
		data: {
			labels: data.time.slice(0, 337).reduce(groupingTimeCallback, []),
			datasets: [
				{
					label: "Page views",
					data: data.pageviews.slice(0, 337).reduce(groupingDataCallback, []),
					borderWidth: 2,
					yAxisID: "y",
					pointStyle: false,
				},
				{
					label: "Bandwidth",
					data: data.bandwidth.slice(0, 337).reduce(groupingDataCallback, []),
					borderWidth: 2,
					yAxisID: "y1",
					pointStyle: false,
				},
			],
		},
		options: {
			scales: {
				x: {
					type: "time",
					time: {
						unit: "day",
					},
				},
				y: {
					beginAtZero: true,
					type: "linear",
					display: true,
					position: "left",
					max: yMax,
				},
				y1: {
					beginAtZero: true,
					type: "linear",
					display: true,
					position: "right",
					ticks: {
						callback(tickValue, index, ticks) {
							return prettyBytes(tickValue)
						},
					},
				},
			},
			plugins: {
				title: {
					display: true,
					text: "Analytics of The 2023 r/place Atlas: 29 July-2 August"
				},
				tooltip: {
					callbacks: {
						label(context) {
							let label = context.dataset.label || ""

							if (label) {
								label += ": "
							}

							if (context.dataset.label === "Bandwidth") {
								label += prettyBytes(context.parsed.y)
							} else {
								label += context.formattedValue
							}

							return label
						},
					},
				},
			},
			interaction: {
				mode: "index",
			},
		},
	})
</script>	
</p>
