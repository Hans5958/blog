---
import type { CollectionEntry } from 'astro:content';
import { unified } from 'unified';
import remarkParse from 'remark-parse'
import remarkGfm from 'remark-gfm'
import remarkHtml from 'remark-html'
import baseUrl from './baseUrl.js';
import { Icon } from 'astro-icon';
import readingTime from 'reading-time';

interface Props {
  post: CollectionEntry<'posts'>;
}

// `post` will match your 'blog' collection schema type
const { post } = Astro.props;
const { Content, headings } = await post.render();

const coverImageAstro = post.data.cover?.src || ""

let excerpt = ""

if (post.data.excerpt) {
	const excerptUnified = await unified()
		.use(remarkParse)
		.use(remarkGfm)
		.use(remarkHtml)
		.process(post.data.excerpt)
	excerpt = excerptUnified.toString()
}

const readingTimeMins = Math.round(readingTime(post.body).minutes)
let readingTimeDisplay: string
if (readingTimeMins === 1) readingTimeDisplay = "1 minute"
else readingTimeDisplay = readingTimeMins + " minutes"
---

<a href={baseUrl('/' + post.data.slug)} class="block p-4 border shadow rounded hover:shadow-lg focus:shadow-lg focus:outline-none focus:ring-2 focus:ring-blue-500 active:shadow-lg active:bg-gray-100 transition">

	<article itemscope itemtype="http://schema.org/BlogPosting">

		<header class="post-header">
			<h1 class="text-3xl font-bold mb-2" itemprop="name headline">{ post.data.title }</h1>
			<p class="text-gray-500">
				<Icon name="bi:calendar-fill" class="w-4 h-4 inline align-[-.125rem]" />
				<time class="post-date-published" datetime={ post.data.date.toISOString() } itemprop="datePublished">
					{ post.data.date.toLocaleDateString('en-UK', { year: 'numeric', month: 'long', day: 'numeric' }) }
				</time>
				â€“
				<Icon name="bi:clock-fill" class="w-4 h-4 inline align-[-.125rem]" />
				<span>{ readingTimeDisplay }</span>	
			</p>
		</header>

		{ post.data.cover && post.data.cover.src && <img itemprop="image" class="mt-4" src={ baseUrl(coverImageAstro.toString()) } alt={ post.data.cover.alt } /> }
		{ excerpt && <div class="mt-3" itemprop="articleBody" set:html={ excerpt }></div> }
		
	</article>

</a>
